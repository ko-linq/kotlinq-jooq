/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.generated.DefaultSchema;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.TrackedTimeRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TrackedTime extends TableImpl<TrackedTimeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>TRACKED_TIME</code>
     */
    public static final TrackedTime TRACKED_TIME = new TrackedTime();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TrackedTimeRecord> getRecordType() {
        return TrackedTimeRecord.class;
    }

    /**
     * The column <code>TRACKED_TIME.ID</code>.
     */
    public final TableField<TrackedTimeRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TRACKED_TIME.USER_ID</code>.
     */
    public final TableField<TrackedTimeRecord, Integer> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TRACKED_TIME.DATE</code>.
     */
    public final TableField<TrackedTimeRecord, LocalDate> DATE = createField(DSL.name("DATE"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>TRACKED_TIME.MINUTES</code>.
     */
    public final TableField<TrackedTimeRecord, Integer> MINUTES = createField(DSL.name("MINUTES"), SQLDataType.INTEGER.nullable(false), this, "");

    private TrackedTime(Name alias, Table<TrackedTimeRecord> aliased) {
        this(alias, aliased, null);
    }

    private TrackedTime(Name alias, Table<TrackedTimeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>TRACKED_TIME</code> table reference
     */
    public TrackedTime(String alias) {
        this(DSL.name(alias), TRACKED_TIME);
    }

    /**
     * Create an aliased <code>TRACKED_TIME</code> table reference
     */
    public TrackedTime(Name alias) {
        this(alias, TRACKED_TIME);
    }

    /**
     * Create a <code>TRACKED_TIME</code> table reference
     */
    public TrackedTime() {
        this(DSL.name("TRACKED_TIME"), null);
    }

    public <O extends Record> TrackedTime(Table<O> child, ForeignKey<O, TrackedTimeRecord> key) {
        super(child, key, TRACKED_TIME);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<TrackedTimeRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_3;
    }

    @Override
    public List<ForeignKey<TrackedTimeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_TIME_USER);
    }

    private transient Employee _employee;

    /**
     * Get the implicit join path to the <code>PUBLIC.EMPLOYEE</code> table.
     */
    public Employee employee() {
        if (_employee == null)
            _employee = new Employee(this, Keys.FK_TIME_USER);

        return _employee;
    }

    @Override
    public TrackedTime as(String alias) {
        return new TrackedTime(DSL.name(alias), this);
    }

    @Override
    public TrackedTime as(Name alias) {
        return new TrackedTime(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TrackedTime rename(String name) {
        return new TrackedTime(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TrackedTime rename(Name name) {
        return new TrackedTime(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, LocalDate, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
