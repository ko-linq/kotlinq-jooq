/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.generated.tables.Employee;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmployeeRecord extends UpdatableRecordImpl<EmployeeRecord> implements Record4<Integer, String, Short, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>EMPLOYEE.ID</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>EMPLOYEE.ID</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>EMPLOYEE.USERNAME</code>.
     */
    public void setUsername(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>EMPLOYEE.USERNAME</code>.
     */
    public String getUsername() {
        return (String) get(1);
    }

    /**
     * Setter for <code>EMPLOYEE.AGE</code>.
     */
    public void setAge(Short value) {
        set(2, value);
    }

    /**
     * Getter for <code>EMPLOYEE.AGE</code>.
     */
    public Short getAge() {
        return (Short) get(2);
    }

    /**
     * Setter for <code>EMPLOYEE.ENABLED</code>.
     */
    public void setEnabled(Boolean value) {
        set(3, value);
    }

    /**
     * Getter for <code>EMPLOYEE.ENABLED</code>.
     */
    public Boolean getEnabled() {
        return (Boolean) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Short, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, Short, Boolean> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Employee.EMPLOYEE.ID;
    }

    @Override
    public Field<String> field2() {
        return Employee.EMPLOYEE.USERNAME;
    }

    @Override
    public Field<Short> field3() {
        return Employee.EMPLOYEE.AGE;
    }

    @Override
    public Field<Boolean> field4() {
        return Employee.EMPLOYEE.ENABLED;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getUsername();
    }

    @Override
    public Short component3() {
        return getAge();
    }

    @Override
    public Boolean component4() {
        return getEnabled();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getUsername();
    }

    @Override
    public Short value3() {
        return getAge();
    }

    @Override
    public Boolean value4() {
        return getEnabled();
    }

    @Override
    public EmployeeRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public EmployeeRecord value2(String value) {
        setUsername(value);
        return this;
    }

    @Override
    public EmployeeRecord value3(Short value) {
        setAge(value);
        return this;
    }

    @Override
    public EmployeeRecord value4(Boolean value) {
        setEnabled(value);
        return this;
    }

    @Override
    public EmployeeRecord values(Integer value1, String value2, Short value3, Boolean value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EmployeeRecord
     */
    public EmployeeRecord() {
        super(Employee.EMPLOYEE);
    }

    /**
     * Create a detached, initialised EmployeeRecord
     */
    public EmployeeRecord(Integer id, String username, Short age, Boolean enabled) {
        super(Employee.EMPLOYEE);

        setId(id);
        setUsername(username);
        setAge(age);
        setEnabled(enabled);
    }
}
